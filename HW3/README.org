* General notes
  All root-finding routines are placed in the [[file:findroot.f03]]
  module. Both problems (the client code) are implemented within the
  same file, [[file:main.f03]] (see the comment to the main program for
  the calling convention and parameters). The creation of artifacts in
  [[file:output/]] is orchestrated by the shell script [[runall.sh]], which
  builds the executable (~main~), calls it with appropriate parameters
  and forwards the results to ~gnuplot~. (The ~gnuplot~ code for the 3
  types of figures is provided in [[./gnuplot]].)
  
  Refer to the /discussion/ in the header of [[file:main.f03]] for
  additional information on the compiler support.
* Problem 1
** Part (a)
To calculate the square root of a number, run
#+BEGIN_EXAMPLE
$ ./main <n_task> <number>
#+END_EXAMPLE
where ~<n_task>~ can be either 1 or 2, corresponding, respectively, to
bisection and Newton-Raphson algorithms.

The output of the program when calculating the square root of 2:
| Algorithm      | Output                       |
|----------------+------------------------------|
| Bisection      | [[file:output/sr_bisection.txt]] |
| Newton-Raphson | [[file:output/sr_newton.txt]]    |

The columns in the output provide the following per-iteration
debugging information:
#+BEGIN_EXAMPLE
<current estimate> <lower bracket> <upper bracket>
#+END_EXAMPLE

This output will be used to demonstrate convergence of the two
methods.

Note that the final result is slightly different between bisection and
Netwon-Raphson when calculating the sqare root. ~sqrt(2.0)~ is not
exactly representable as a floating-point number (or any decimal
number since it is irrational!), but both results are within the
round-off error from the actual value.

In the convergence plot below, ~|x_c - x_f|~ is the absolute value of
the difference between the current iteration estimate and the final
result (which is assumbed to /the actual/ value).

[[file:output/sr_conv.png]]

** Part (b)
To calculate the eccentric anomaly for a given value of ~e~ (with
~M=1.5~), run
#+BEGIN_EXAMPLE
$ ./main <n_task> <e>
#+END_EXAMPLE
where ~<n_task>~ can be either 3 or 4, corresponding, respectively, to
bisection and Newton-Raphson algorithms.

The output of the program when solving the Kepler's equation for
~M=1.5~ and ~e=0.5~:
| Algorithm      | Output                               |
|----------------+--------------------------------------|
| Bisection      | [[file:output/kepler_0.5_bisection.txt]] |
| Newton-Raphson | [[file:output/kepler_0.5_newton.txt]]    |

The output of the program when solving the Kepler's equation for
~M=1.5~ and ~e=0.9~:
| Algorithm      | Output                               |
|----------------+--------------------------------------|
| Bisection      | [[file:output/kepler_0.9_bisection.txt]] |
| Newton-Raphson | [[file:output/kepler_0.9_newton.txt]]    |

Convergence plots for each value of ~e~ (produced completely
analogously to the one for square root) are provided below.

[[file:output/kepler_0.5_conv.png]]
[[file:output/kepler_0.9_conv.png]]
* Problem 2
Calculations of the eccentric anomaly for an orbit with ~e=0.9~ using
the bisection and Newton-Raphson methods produced numerically
identical results (with very minor discrepancies within the round-off
error which had absolutely no effect on the produced plot). (The plot
below was generated via Newton-Raphson from the output in 
[[file:output/eccentric_anomaly_0.0.txt]], where the first column 
is the mean anomaly, the second column is the eccentric anomaly and the third column
is the value of ~M-E+e*sin(E)~.)

[[file:output/eccentric_anomaly_0.9.png]]

It is easy to express the true anomaly in terms of the eccentric
anomaly and visualize the orbit. In the plot below the semi-major
axis, ~a~, is set to 1 and the semi-minor axis, ~b~, is calculated
accordingly. The yellow circle is the Sun. It is evident that Kepler's
2nd law holds: the areas of the segments between the position vectors
are equal; they correspond to the equal time intervals along the
orbit.

[[file:output/keplerian_orbit_0.9.png]]

Here's a visualization of the orbit of Halley's Comet with an even
greater eccentricity. Since its orbital period is about 75 years, it
spends roughly 3 years and 9 months traversing each segment.

[[file:output/keplerian_orbit_halley.png]]

Finally, below is a rather crude comparison of the performance among
different algorithms and implementations. Each algorithm was used to
compute 100000 eccentric anomalies corresponding to equally spaced
mean anomalies along an orbit with ~e=0.9~. A reasonably /pythonic/
implementation using library functions was written for this test; it
can be found in [[file:benchmark.py]]. It is notable that the performance
of ~scipy.optimize.newton~ was significantly worse than that of
~scipy.optimize.bisect~.

| Algorithm/Implementation        | Time, s |
|---------------------------------+---------|
| scipy.optimizem.bisect (Python) |   4.510 |
| scipy.optimize.brentq (Python)  |   1.337 |
| Bisection (Fortran)             |   0.277 |
| Newton-Raphson (Fortran)        |   0.093 |

No deliberate care was taken to achieve high performance of the Fortran
implementations. There's likely still room for improvement!
