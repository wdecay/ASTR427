* General notes
Runing ~make~ will produce the ~main~ binary, which accepts the
following arguments:
#+BEGIN_EXAMPLE
$ ./main
One parameters is expected: 
1 - run optimization tests
2 - compute LSQ function over a 2D grid
#+END_EXAMPLE

Full automation is provided via ~runall.sh~ for which the build and
runtime requirements are: ~bash~, ~GNU make~, ~gfortran~, ~gnuplot~,
~awk~ (the latter was used in [[file:gnuplot/rot_curve_fits.plt]] to
extract numbers from an output file). ~runall.sh~ will save the
data files and plots in the [[file:output]] directory.

* Problem 1
The implementation of the Golden Section Search (GSS) algorithm can be
found in [[file:optimization.f03]].
* Problems 2 and 3
Below is the the output of the rotation curve fitting code (see
[[file:main.f03]]).
#+BEGIN_EXAMPLE
$ ./main 1
          Method            Vinf              R0       LSQ error
----------------------------------------------------------------
             GSS     100.0000000       3.3303781     530.8484105
          NEWUOA     110.7799056       4.1643865     425.8798929
#+END_EXAMPLE
** Comments on the NEW Unconstrained Optimization Algorithm (NEWUOA)
Finding a working Fortran nonlinear optimization library was the
biggest challenge and, perhaps, a testament to the shortcomings of the
modern Fortran ecosystem with regard to the availability of standard
high-quality numerical libraries. I initially tried [[https://en.wikipedia.org/wiki/MINPACK][MINPACK]] (~HYBRD1~
subroutine), but was unable to achieve adequate performance on this
problem. There exist several commercial libraries with optimization
capabilities sold for hundreds of dollars, but nothing free and
well-established turned up in my search.

The NEWOUA optimization module used here (see [[file:newuoa]]) is based on
the mostly intact Fortran 77 code written by Professor [[https://en.wikipedia.org/wiki/Michael_J._D._Powell][M. J. D. Powell]]
himself. I fount it at
https://www.zhangzk.net/software.html#powell_software and made a few
very minor modifications to simplify the calling convention and
facilitate the build. This implementation is likely the basis for the
Powell's minimization method in ~scipy~ since both produce virtually
identical results.

** Comments on the results
The discrepancy between the original model and the fits can be
explained by expanding the rotation curve equation to the first order
in ~r~ as follows: ~v = (vinf/r0)*r + vinf~. Based on the figure
below, it is easy to see that the overall bias introduced by the
Gaussian noise is such that the slope (~vinf/r0~) appears to be less
steep at low ~r~ than that in the actual model, so we would expect
that the fits will have ~vinf/r0 < 100/3~. At higher ~r~ (where
~v~vinf~) the bias is in favor of higher ~vinf~. Therefore, if the
model is allowed to adjust ~vinf~, it is reasonable to expect that it
will produce ~vinf > 100~. These two observations are consistent with
the results:
- GSS settled for a less steep slope: ~100.00/3.33 < 100/3~
- NEWUOA settled for both higher ~vinf = 110.78 > 100~ and less steep
  slope ~vinf/r0 = 110.78/4.16 < 100/3~.

Collecting more data is the way to minimize the impact of such
noise-induced biases.

[[file:output/rot_curve_fits.png]]

Finally, we can assess the results from GSS and NEWUOA by plotting a
heatmap of the least squares function. It is clear that NEWUOA
converged near the actual global minimum, whereas GSS was unable to do
so due to the constraint on ~vinf~; hence, it converged on the minimum
across the vertical slice at ~vinf = 100~. The values of the LSQ
errors shown in the program's output above as well as the optimal
values are consistent with what would be expected based on this plot.

[[file:output/map.png]]
